"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2019 Toyota Research Institute.  All rights reserved.
Definitions for geometric objects
"""

import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class Point3D(google.protobuf.message.Message):
    """Coordinates on the map."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    X_FIELD_NUMBER: builtins.int
    Y_FIELD_NUMBER: builtins.int
    Z_FIELD_NUMBER: builtins.int
    x: builtins.float
    y: builtins.float
    z: builtins.float
    def __init__(
        self,
        *,
        x: builtins.float = ...,
        y: builtins.float = ...,
        z: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["x", b"x", "y", b"y", "z", b"z"]) -> None: ...

global___Point3D = Point3D

@typing.final
class Vector3(google.protobuf.message.Message):
    """3-DOF Vector represented via double"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    X_FIELD_NUMBER: builtins.int
    Y_FIELD_NUMBER: builtins.int
    Z_FIELD_NUMBER: builtins.int
    x: builtins.float
    y: builtins.float
    z: builtins.float
    def __init__(
        self,
        *,
        x: builtins.float = ...,
        y: builtins.float = ...,
        z: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["x", b"x", "y", b"y", "z", b"z"]) -> None: ...

global___Vector3 = Vector3

@typing.final
class Quaternion(google.protobuf.message.Message):
    """Quaternion used to represent a 3D rotation
    Note, that rotation quaternions are unit-quaternions
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    QX_FIELD_NUMBER: builtins.int
    QY_FIELD_NUMBER: builtins.int
    QZ_FIELD_NUMBER: builtins.int
    QW_FIELD_NUMBER: builtins.int
    qx: builtins.float
    qy: builtins.float
    qz: builtins.float
    qw: builtins.float
    def __init__(
        self,
        *,
        qx: builtins.float = ...,
        qy: builtins.float = ...,
        qz: builtins.float = ...,
        qw: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["qw", b"qw", "qx", b"qx", "qy", b"qy", "qz", b"qz"]) -> None: ...

global___Quaternion = Quaternion

@typing.final
class Pose(google.protobuf.message.Message):
    """6-DOF Pose"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TRANSLATION_FIELD_NUMBER: builtins.int
    ROTATION_FIELD_NUMBER: builtins.int
    REFERENCE_COORDINATE_SYSTEM_FIELD_NUMBER: builtins.int
    reference_coordinate_system: builtins.str
    """Indicate the name of the coordinate system the above transform is from:
      i.e. let x_ref be a vector in reference_coordinate_system and x_pose a vector in this Pose's coordinate system (e.g. sensor's),
      then x_ref = rotation . x_pose + translation
      TODO: Coordinate systems Naming Convention
    """
    @property
    def translation(self) -> global___Vector3: ...
    @property
    def rotation(self) -> global___Quaternion: ...
    def __init__(
        self,
        *,
        translation: global___Vector3 | None = ...,
        rotation: global___Quaternion | None = ...,
        reference_coordinate_system: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["rotation", b"rotation", "translation", b"translation"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["reference_coordinate_system", b"reference_coordinate_system", "rotation", b"rotation", "translation", b"translation"]) -> None: ...

global___Pose = Pose

@typing.final
class CameraIntrinsics(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FX_FIELD_NUMBER: builtins.int
    FY_FIELD_NUMBER: builtins.int
    CX_FIELD_NUMBER: builtins.int
    CY_FIELD_NUMBER: builtins.int
    SKEW_FIELD_NUMBER: builtins.int
    FOV_FIELD_NUMBER: builtins.int
    FISHEYE_FIELD_NUMBER: builtins.int
    K1_FIELD_NUMBER: builtins.int
    K2_FIELD_NUMBER: builtins.int
    K3_FIELD_NUMBER: builtins.int
    K4_FIELD_NUMBER: builtins.int
    K5_FIELD_NUMBER: builtins.int
    K6_FIELD_NUMBER: builtins.int
    P1_FIELD_NUMBER: builtins.int
    P2_FIELD_NUMBER: builtins.int
    S1_FIELD_NUMBER: builtins.int
    S2_FIELD_NUMBER: builtins.int
    S3_FIELD_NUMBER: builtins.int
    S4_FIELD_NUMBER: builtins.int
    TAUX_FIELD_NUMBER: builtins.int
    TAUY_FIELD_NUMBER: builtins.int
    ALPHA_FIELD_NUMBER: builtins.int
    BETA_FIELD_NUMBER: builtins.int
    W_FIELD_NUMBER: builtins.int
    XI_FIELD_NUMBER: builtins.int
    EQUIRECTANGULAR_FIELD_NUMBER: builtins.int
    fx: builtins.float
    fy: builtins.float
    cx: builtins.float
    cy: builtins.float
    skew: builtins.float
    fov: builtins.float
    """Camera distortion parameters, copied over from Parallel Domain
    These include the default opencv distorition model parameters (Brown Conrady)
    See https://en.wikipedia.org/wiki/Distortion_(optics) and opencv calibrateCamera for details
    Additionally the Double Sphere Camera Model (https://arxiv.org/pdf/1807.08957.pdf) by Usenko, Demmel, and Cremers
    is an excellent reference
    """
    fisheye: builtins.int
    k1: builtins.float
    k2: builtins.float
    k3: builtins.float
    k4: builtins.float
    k5: builtins.float
    k6: builtins.float
    p1: builtins.float
    p2: builtins.float
    s1: builtins.float
    """Additional parameters for thin prism model"""
    s2: builtins.float
    s3: builtins.float
    s4: builtins.float
    taux: builtins.float
    """Additional parameters for tilted sensor model"""
    tauy: builtins.float
    alpha: builtins.float
    """Additional parameters for UCM and EUCM camera models"""
    beta: builtins.float
    w: builtins.float
    """Additional parameters for FOV camera model"""
    xi: builtins.float
    """Parameters for Double Sphere model"""
    equirectangular: builtins.int
    """Flag to indicate camera model is Equirectangular"""
    def __init__(
        self,
        *,
        fx: builtins.float = ...,
        fy: builtins.float = ...,
        cx: builtins.float = ...,
        cy: builtins.float = ...,
        skew: builtins.float = ...,
        fov: builtins.float = ...,
        fisheye: builtins.int = ...,
        k1: builtins.float = ...,
        k2: builtins.float = ...,
        k3: builtins.float = ...,
        k4: builtins.float = ...,
        k5: builtins.float = ...,
        k6: builtins.float = ...,
        p1: builtins.float = ...,
        p2: builtins.float = ...,
        s1: builtins.float = ...,
        s2: builtins.float = ...,
        s3: builtins.float = ...,
        s4: builtins.float = ...,
        taux: builtins.float = ...,
        tauy: builtins.float = ...,
        alpha: builtins.float = ...,
        beta: builtins.float = ...,
        w: builtins.float = ...,
        xi: builtins.float = ...,
        equirectangular: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["alpha", b"alpha", "beta", b"beta", "cx", b"cx", "cy", b"cy", "equirectangular", b"equirectangular", "fisheye", b"fisheye", "fov", b"fov", "fx", b"fx", "fy", b"fy", "k1", b"k1", "k2", b"k2", "k3", b"k3", "k4", b"k4", "k5", b"k5", "k6", b"k6", "p1", b"p1", "p2", b"p2", "s1", b"s1", "s2", b"s2", "s3", b"s3", "s4", b"s4", "skew", b"skew", "taux", b"taux", "tauy", b"tauy", "w", b"w", "xi", b"xi"]) -> None: ...

global___CameraIntrinsics = CameraIntrinsics
