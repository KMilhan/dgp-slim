"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2019-2021 Toyota Research Institute.  All rights reserved.
Definitions for agents within a dataset.
"""

import builtins
import collections.abc
import dgp.proto.annotations_pb2
import dgp.proto.identifiers_pb2
import google.protobuf.any_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class AgentSnapshot2D(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CLASS_ID_FIELD_NUMBER: builtins.int
    BOX_FIELD_NUMBER: builtins.int
    AREA_FIELD_NUMBER: builtins.int
    ISCROWD_FIELD_NUMBER: builtins.int
    INSTANCE_ID_FIELD_NUMBER: builtins.int
    FEATURES_FIELD_NUMBER: builtins.int
    FEATURE_TYPE_FIELD_NUMBER: builtins.int
    class_id: builtins.int
    """Class identifier (should be in [0, num_classes - 1])
    For datasets supporting semantic segmentation and detection,
    num_classes corresponds to the number of segmentation classes.
    For datasets only supporting detection, this is the number of
    thing classes.
    """
    area: builtins.int
    """Other fields useful for downstream metric computation."""
    iscrowd: builtins.bool
    """Refer to crowd box in coco dataset."""
    instance_id: builtins.int
    """Instance identifier for this agent.
    This needs to be unique in an image.
    """
    feature_type: builtins.int
    """The type of feature ontology defined in FeatureType in features.proto."""
    @property
    def box(self) -> dgp.proto.annotations_pb2.BoundingBox2D:
        """2D box"""

    @property
    def features(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """List of features, which are the values of the fields associated
        with certain FeatureType in dgp.features.proto.
        """

    def __init__(
        self,
        *,
        class_id: builtins.int = ...,
        box: dgp.proto.annotations_pb2.BoundingBox2D | None = ...,
        area: builtins.int = ...,
        iscrowd: builtins.bool = ...,
        instance_id: builtins.int = ...,
        features: collections.abc.Iterable[builtins.str] | None = ...,
        feature_type: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["box", b"box"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["area", b"area", "box", b"box", "class_id", b"class_id", "feature_type", b"feature_type", "features", b"features", "instance_id", b"instance_id", "iscrowd", b"iscrowd"]) -> None: ...

global___AgentSnapshot2D = AgentSnapshot2D

@typing.final
class AgentSnapshot3D(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CLASS_ID_FIELD_NUMBER: builtins.int
    BOX_FIELD_NUMBER: builtins.int
    INSTANCE_ID_FIELD_NUMBER: builtins.int
    FEATURES_FIELD_NUMBER: builtins.int
    FEATURE_TYPE_FIELD_NUMBER: builtins.int
    class_id: builtins.int
    """Class identifier. Should be in range [0, num_classes - 1]."""
    instance_id: builtins.int
    """Instance identifier for this agent.
    This needs to be unique to a scene.
    """
    feature_type: builtins.int
    """The type of feature ontology defined in FeatureType in features.proto."""
    @property
    def box(self) -> dgp.proto.annotations_pb2.BoundingBox3D:
        """3D box, the pose of box is in sensor coordinate."""

    @property
    def features(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """List of features, which are the values of the fields associated
        with certain FeatureType in dgp.features.proto.
        """

    def __init__(
        self,
        *,
        class_id: builtins.int = ...,
        box: dgp.proto.annotations_pb2.BoundingBox3D | None = ...,
        instance_id: builtins.int = ...,
        features: collections.abc.Iterable[builtins.str] | None = ...,
        feature_type: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["box", b"box"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["box", b"box", "class_id", b"class_id", "feature_type", b"feature_type", "features", b"features", "instance_id", b"instance_id"]) -> None: ...

global___AgentSnapshot3D = AgentSnapshot3D

@typing.final
class AgentSnapshot(google.protobuf.message.Message):
    """AgentSnapshot that takes values from one of agent types."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    AGENT_SNAPSHOT_2D_FIELD_NUMBER: builtins.int
    AGENT_SNAPSHOT_3D_FIELD_NUMBER: builtins.int
    SLICE_ID_FIELD_NUMBER: builtins.int
    RAW_SENSOR_DATUM_ID_FIELD_NUMBER: builtins.int
    @property
    def agent_snapshot_2D(self) -> global___AgentSnapshot2D: ...
    @property
    def agent_snapshot_3D(self) -> global___AgentSnapshot3D: ...
    @property
    def slice_id(self) -> dgp.proto.identifiers_pb2.DatumId:
        """Unique slice identifier (See dgp.idenfiers.proto)
        Copy from Sample.id to ensure one-one match between a AgentSlice and Sample
        in a Scene.
        """

    @property
    def raw_sensor_datum_id(self) -> dgp.proto.identifiers_pb2.DatumId:
        """Unique slice identifier (See dgp.idenfiers.proto).
        Copy from Datum.id if the agent snapshot is associate with certain datum.
        """

    def __init__(
        self,
        *,
        agent_snapshot_2D: global___AgentSnapshot2D | None = ...,
        agent_snapshot_3D: global___AgentSnapshot3D | None = ...,
        slice_id: dgp.proto.identifiers_pb2.DatumId | None = ...,
        raw_sensor_datum_id: dgp.proto.identifiers_pb2.DatumId | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["agent_snapshot_2D", b"agent_snapshot_2D", "agent_snapshot_3D", b"agent_snapshot_3D", "agent_snapshot_oneof", b"agent_snapshot_oneof", "raw_sensor_datum_id", b"raw_sensor_datum_id", "slice_id", b"slice_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["agent_snapshot_2D", b"agent_snapshot_2D", "agent_snapshot_3D", b"agent_snapshot_3D", "agent_snapshot_oneof", b"agent_snapshot_oneof", "raw_sensor_datum_id", b"raw_sensor_datum_id", "slice_id", b"slice_id"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["agent_snapshot_oneof", b"agent_snapshot_oneof"]) -> typing.Literal["agent_snapshot_2D", "agent_snapshot_3D"] | None: ...

global___AgentSnapshot = AgentSnapshot

@typing.final
class AgentsSlice(google.protobuf.message.Message):
    """AgentsSlice encapsulates all Agents in a Sample."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SLICE_ID_FIELD_NUMBER: builtins.int
    AGENT_SNAPSHOTS_FIELD_NUMBER: builtins.int
    @property
    def slice_id(self) -> dgp.proto.identifiers_pb2.DatumId:
        """Unique Slice identifier (See dgp.idenfiers.proto)
        Copy from unique Sample identifier (See dgp.sample.proto) to ensure one-one match
        between a AgentSlice and Sample.
        in a Scene.
        """

    @property
    def agent_snapshots(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___AgentSnapshot]:
        """List of AgentSnapshots encapsulated in the AgentsSlice."""

    def __init__(
        self,
        *,
        slice_id: dgp.proto.identifiers_pb2.DatumId | None = ...,
        agent_snapshots: collections.abc.Iterable[global___AgentSnapshot] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["slice_id", b"slice_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["agent_snapshots", b"agent_snapshots", "slice_id", b"slice_id"]) -> None: ...

global___AgentsSlice = AgentsSlice

@typing.final
class AgentsSlices(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class MetadataEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> google.protobuf.any_pb2.Any: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: google.protobuf.any_pb2.Any | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    AGENTS_SLICES_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    @property
    def agents_slices(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___AgentsSlice]: ...
    @property
    def metadata(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, google.protobuf.any_pb2.Any]:
        """Sample-specific metadata"""

    def __init__(
        self,
        *,
        agents_slices: collections.abc.Iterable[global___AgentsSlice] | None = ...,
        metadata: collections.abc.Mapping[builtins.str, google.protobuf.any_pb2.Any] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["agents_slices", b"agents_slices", "metadata", b"metadata"]) -> None: ...

global___AgentsSlices = AgentsSlices

@typing.final
class AgentTrack(google.protobuf.message.Message):
    """AgentTrack is the track of a single Agent in the Scene."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CLASS_ID_FIELD_NUMBER: builtins.int
    INSTANCE_ID_FIELD_NUMBER: builtins.int
    AGENT_SNAPSHOTS_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    class_id: builtins.int
    """Class identifier (should be in [0, num_classes - 1])"""
    instance_id: builtins.int
    """Agent identifier"""
    @property
    def agent_snapshots(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___AgentSnapshot]:
        """List of AgentSnapshots encapsulated in the AgentTrack."""

    @property
    def metadata(self) -> google.protobuf.any_pb2.Any:
        """Compiled proto is available to both the writer and reader of the dataset."""

    def __init__(
        self,
        *,
        class_id: builtins.int = ...,
        instance_id: builtins.int = ...,
        agent_snapshots: collections.abc.Iterable[global___AgentSnapshot] | None = ...,
        metadata: google.protobuf.any_pb2.Any | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["metadata", b"metadata"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["agent_snapshots", b"agent_snapshots", "class_id", b"class_id", "instance_id", b"instance_id", "metadata", b"metadata"]) -> None: ...

global___AgentTrack = AgentTrack

@typing.final
class AgentTracks(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class MetadataEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> google.protobuf.any_pb2.Any: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: google.protobuf.any_pb2.Any | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    AGENT_TRACKS_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    @property
    def agent_tracks(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___AgentTrack]: ...
    @property
    def metadata(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, google.protobuf.any_pb2.Any]:
        """Sample-specific metadata"""

    def __init__(
        self,
        *,
        agent_tracks: collections.abc.Iterable[global___AgentTrack] | None = ...,
        metadata: collections.abc.Mapping[builtins.str, google.protobuf.any_pb2.Any] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["agent_tracks", b"agent_tracks", "metadata", b"metadata"]) -> None: ...

global___AgentTracks = AgentTracks

@typing.final
class AgentGroup(google.protobuf.message.Message):
    """AgentGroup encapsulates all Agents in a Scene."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class MetadataEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> google.protobuf.any_pb2.Any: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: google.protobuf.any_pb2.Any | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing.final
    class FeatureOntologiesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.int
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.int = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing.final
    class AgentOntologiesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.int
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.int = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    LOG_FIELD_NUMBER: builtins.int
    AGENTS_SLICES_FILE_FIELD_NUMBER: builtins.int
    AGENT_TRACKS_FILE_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    CREATION_DATE_FIELD_NUMBER: builtins.int
    FEATURE_ONTOLOGIES_FIELD_NUMBER: builtins.int
    AGENT_ONTOLOGIES_FIELD_NUMBER: builtins.int
    name: builtins.str
    """Unique name for the group of Agents in a Scene.

    Usually, group name is set as the hash of algorithm or label that generate
    the agents.

    For group without unique names, generate a sha1 hash of
    all the AgentSnapshot keys combined.
    """
    description: builtins.str
    """Optional, short description of the group (~200 characters)."""
    log: builtins.str
    """Log identifier
    Refer to dgp.identifiers.proto for more information.
    """
    agents_slices_file: builtins.str
    """List of AgentSlices corresponding to this Scene, each Slice contains
    AgentSnapshots from one Sample in the Scene.
    """
    agent_tracks_file: builtins.str
    """List of AgentTracks in this Scene."""
    @property
    def metadata(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, google.protobuf.any_pb2.Any]:
        """Optional metadata"""

    @property
    def creation_date(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Date and timestamp of AgentGroup creation."""

    @property
    def feature_ontologies(self) -> google.protobuf.internal.containers.ScalarMap[builtins.int, builtins.str]:
        """Task-specific feature ontologies.
        Ontologies are stored under <scene_dir>/feature_ontology/<ontology_sha1>.json
        Maps dgp.proto.FeatureType (Agent_3D, EGO_INTENTION, etc) to the filename
        containing the ontology for the specific FeatureType/Task.
        """

    @property
    def agent_ontologies(self) -> google.protobuf.internal.containers.ScalarMap[builtins.int, builtins.str]:
        """Task-specific agent ontologies.
        Agent ontologies are stored under <scene_dir>/ontology/<ontology_sha1>.json
        Maps dgp.proto.AnnotationType (bounding_box_3d, etc) to the filename
        containing the ontology for the specific AgentType/Task.
        """

    def __init__(
        self,
        *,
        name: builtins.str = ...,
        description: builtins.str = ...,
        log: builtins.str = ...,
        agents_slices_file: builtins.str = ...,
        agent_tracks_file: builtins.str = ...,
        metadata: collections.abc.Mapping[builtins.str, google.protobuf.any_pb2.Any] | None = ...,
        creation_date: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        feature_ontologies: collections.abc.Mapping[builtins.int, builtins.str] | None = ...,
        agent_ontologies: collections.abc.Mapping[builtins.int, builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["creation_date", b"creation_date"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["agent_ontologies", b"agent_ontologies", "agent_tracks_file", b"agent_tracks_file", "agents_slices_file", b"agents_slices_file", "creation_date", b"creation_date", "description", b"description", "feature_ontologies", b"feature_ontologies", "log", b"log", "metadata", b"metadata", "name", b"name"]) -> None: ...

global___AgentGroup = AgentGroup
