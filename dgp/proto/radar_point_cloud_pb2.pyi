"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2021 Toyota Research Institute.  All rights reserved.
Definitions for radar point cloud and radar point cloud metadata.
"""

import builtins
import collections.abc
import dgp.proto.geometry_pb2
import google.protobuf.any_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class RadarPointCloud(google.protobuf.message.Message):
    """Basic point cloud container for DGP"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _ChannelType:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _ChannelTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[RadarPointCloud._ChannelType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        X: RadarPointCloud._ChannelType.ValueType  # 0
        """X, Y, and Z coordinates of point."""
        Y: RadarPointCloud._ChannelType.ValueType  # 1
        Z: RadarPointCloud._ChannelType.ValueType  # 2
        V_X: RadarPointCloud._ChannelType.ValueType  # 3
        """Radar specific channels
        Point Velocity
        """
        V_Y: RadarPointCloud._ChannelType.ValueType  # 4
        V_Z: RadarPointCloud._ChannelType.ValueType  # 5
        RCS_DBSM: RadarPointCloud._ChannelType.ValueType  # 6
        """Radar cross section"""
        EXISTENCE_PROBABILITY: RadarPointCloud._ChannelType.ValueType  # 7
        SENSOR_ID: RadarPointCloud._ChannelType.ValueType  # 8
        COV_XX: RadarPointCloud._ChannelType.ValueType  # 9
        """Support full covariance matrix for points converted to rectangular
        this will be symmetric so not all channels are needed
        """
        COV_XY: RadarPointCloud._ChannelType.ValueType  # 10
        COV_XZ: RadarPointCloud._ChannelType.ValueType  # 11
        COV_YX: RadarPointCloud._ChannelType.ValueType  # 12
        COV_YY: RadarPointCloud._ChannelType.ValueType  # 13
        COV_YZ: RadarPointCloud._ChannelType.ValueType  # 14
        COV_ZX: RadarPointCloud._ChannelType.ValueType  # 15
        COV_ZY: RadarPointCloud._ChannelType.ValueType  # 16
        COV_ZZ: RadarPointCloud._ChannelType.ValueType  # 17
        RADIAL_DISTANCE: RadarPointCloud._ChannelType.ValueType  # 18
        """Support for raw radar points in spherical coordinates of sensor frame"""
        AZIMUTH_ANGLE: RadarPointCloud._ChannelType.ValueType  # 19
        ELEVATION_ANGLE: RadarPointCloud._ChannelType.ValueType  # 20
        VELOCITY_XS: RadarPointCloud._ChannelType.ValueType  # 21
        RADIAL_DISTANCE_VARIANCE: RadarPointCloud._ChannelType.ValueType  # 22
        AZIMUTH_ANGLE_VARIANCE: RadarPointCloud._ChannelType.ValueType  # 23
        ELEVATION_ANGLE_VARIANCE: RadarPointCloud._ChannelType.ValueType  # 24
        VELOCITY_VARIANCE: RadarPointCloud._ChannelType.ValueType  # 25
        ACCEL_XS: RadarPointCloud._ChannelType.ValueType  # 26
        """Extra channels to support radar target message"""
        COUNT_ALIVE: RadarPointCloud._ChannelType.ValueType  # 27
        REFLECTED_POWER_DB: RadarPointCloud._ChannelType.ValueType  # 28
        R: RadarPointCloud._ChannelType.ValueType  # 29
        """RGB for color."""
        G: RadarPointCloud._ChannelType.ValueType  # 30
        B: RadarPointCloud._ChannelType.ValueType  # 31
        CLASS_ID: RadarPointCloud._ChannelType.ValueType  # 32
        """Class/Instance ID for point cloud semantic segmentation"""
        INSTANCE_ID: RadarPointCloud._ChannelType.ValueType  # 33
        TIMESTAMP: RadarPointCloud._ChannelType.ValueType  # 34
        """Timestamp of this point sample, stored as UTC in microseconds"""

    class ChannelType(_ChannelType, metaclass=_ChannelTypeEnumTypeWrapper):
        """Used to describe the values in the radar pointcloud.
        The ChannelType refers to the dtypes of the radar point cloud
        stored under the 'data' key.
        """

    X: RadarPointCloud.ChannelType.ValueType  # 0
    """X, Y, and Z coordinates of point."""
    Y: RadarPointCloud.ChannelType.ValueType  # 1
    Z: RadarPointCloud.ChannelType.ValueType  # 2
    V_X: RadarPointCloud.ChannelType.ValueType  # 3
    """Radar specific channels
    Point Velocity
    """
    V_Y: RadarPointCloud.ChannelType.ValueType  # 4
    V_Z: RadarPointCloud.ChannelType.ValueType  # 5
    RCS_DBSM: RadarPointCloud.ChannelType.ValueType  # 6
    """Radar cross section"""
    EXISTENCE_PROBABILITY: RadarPointCloud.ChannelType.ValueType  # 7
    SENSOR_ID: RadarPointCloud.ChannelType.ValueType  # 8
    COV_XX: RadarPointCloud.ChannelType.ValueType  # 9
    """Support full covariance matrix for points converted to rectangular
    this will be symmetric so not all channels are needed
    """
    COV_XY: RadarPointCloud.ChannelType.ValueType  # 10
    COV_XZ: RadarPointCloud.ChannelType.ValueType  # 11
    COV_YX: RadarPointCloud.ChannelType.ValueType  # 12
    COV_YY: RadarPointCloud.ChannelType.ValueType  # 13
    COV_YZ: RadarPointCloud.ChannelType.ValueType  # 14
    COV_ZX: RadarPointCloud.ChannelType.ValueType  # 15
    COV_ZY: RadarPointCloud.ChannelType.ValueType  # 16
    COV_ZZ: RadarPointCloud.ChannelType.ValueType  # 17
    RADIAL_DISTANCE: RadarPointCloud.ChannelType.ValueType  # 18
    """Support for raw radar points in spherical coordinates of sensor frame"""
    AZIMUTH_ANGLE: RadarPointCloud.ChannelType.ValueType  # 19
    ELEVATION_ANGLE: RadarPointCloud.ChannelType.ValueType  # 20
    VELOCITY_XS: RadarPointCloud.ChannelType.ValueType  # 21
    RADIAL_DISTANCE_VARIANCE: RadarPointCloud.ChannelType.ValueType  # 22
    AZIMUTH_ANGLE_VARIANCE: RadarPointCloud.ChannelType.ValueType  # 23
    ELEVATION_ANGLE_VARIANCE: RadarPointCloud.ChannelType.ValueType  # 24
    VELOCITY_VARIANCE: RadarPointCloud.ChannelType.ValueType  # 25
    ACCEL_XS: RadarPointCloud.ChannelType.ValueType  # 26
    """Extra channels to support radar target message"""
    COUNT_ALIVE: RadarPointCloud.ChannelType.ValueType  # 27
    REFLECTED_POWER_DB: RadarPointCloud.ChannelType.ValueType  # 28
    R: RadarPointCloud.ChannelType.ValueType  # 29
    """RGB for color."""
    G: RadarPointCloud.ChannelType.ValueType  # 30
    B: RadarPointCloud.ChannelType.ValueType  # 31
    CLASS_ID: RadarPointCloud.ChannelType.ValueType  # 32
    """Class/Instance ID for point cloud semantic segmentation"""
    INSTANCE_ID: RadarPointCloud.ChannelType.ValueType  # 33
    TIMESTAMP: RadarPointCloud.ChannelType.ValueType  # 34
    """Timestamp of this point sample, stored as UTC in microseconds"""

    @typing.final
    class AnnotationsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.int
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.int = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing.final
    class MetadataEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> google.protobuf.any_pb2.Any: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: google.protobuf.any_pb2.Any | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    FILENAME_FIELD_NUMBER: builtins.int
    ANNOTATIONS_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    POINT_FORMAT_FIELD_NUMBER: builtins.int
    POINT_FIELDS_FIELD_NUMBER: builtins.int
    POSE_FIELD_NUMBER: builtins.int
    filename: builtins.str
    """Relative file path for the radar point cloud
    Supported point cloud formats: compressed numpy (npz) format.
    """
    @property
    def annotations(self) -> google.protobuf.internal.containers.ScalarMap[builtins.int, builtins.str]:
        """RadarPointCloud annotations
        Maps dgp.proto.AnnotationType (segmentation, instances) to the filename
        containing the point cloud annotation.

        Radar Point cloud annotations are written in to compressed numpy arrays (npz)
        under the 'data' key.
        """

    @property
    def metadata(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, google.protobuf.any_pb2.Any]:
        """Optional metadata (i.e. miscellaneous enriched annotations)
        TODO: Support only specific metadata types
        """

    @property
    def point_format(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[global___RadarPointCloud.ChannelType.ValueType]:
        """Structure of values in the pointcloud file. Each entry in this array specifies
        the field meaning. A simple pointcloud may simply contain X, Y, and Z channels.
        This would mean that the numpy data representation of this would be an
        [N, 3] shape structured array.
        """

    @property
    def point_fields(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Alternatively, use point fields instead of strongly-typed ChannelType
        For example, radar data can be represented as D-dimensional tensors/matrices with
        point_fields describing the columns for the point cloud data
        """

    @property
    def pose(self) -> dgp.proto.geometry_pb2.Pose:
        """Ego-pose of this datum with respect to the first sample in the scene."""

    def __init__(
        self,
        *,
        filename: builtins.str = ...,
        annotations: collections.abc.Mapping[builtins.int, builtins.str] | None = ...,
        metadata: collections.abc.Mapping[builtins.str, google.protobuf.any_pb2.Any] | None = ...,
        point_format: collections.abc.Iterable[global___RadarPointCloud.ChannelType.ValueType] | None = ...,
        point_fields: collections.abc.Iterable[builtins.str] | None = ...,
        pose: dgp.proto.geometry_pb2.Pose | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["pose", b"pose"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["annotations", b"annotations", "filename", b"filename", "metadata", b"metadata", "point_fields", b"point_fields", "point_format", b"point_format", "pose", b"pose"]) -> None: ...

global___RadarPointCloud = RadarPointCloud
